// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String   @id
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Zone {
    id             String           @id @default(cuid())
    name           String
    descriptiuon   String
    logo           String
    color          String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    Insignia       Insignia[]
    QuestionAnswer QuestionAnswer[]
    Exhibition     Exhibition[]
}

model Insignia {
    id          String @id @default(cuid())
    zone_id     String?
    special_event_id String?
    foto        String
    zone_time   String
    description String
    nfc_code    String
    Zone        Zone?   @relation(fields: [zone_id], references: [id])
    SpecialEvent SpecialEvent? @relation(fields: [special_event_id], references: [id])
}

model Question {
    id             String           @id @default(cuid())
    question       String
    QuestionAnswer QuestionAnswer[]
}

model QuestionAnswer {
    id          String   @id @default(cuid())
    question_id String
    zone_id     String
    Zone        Zone     @relation(fields: [zone_id], references: [id])
    Question    Question @relation(fields: [question_id], references: [id])
}

model Exhibition {
    id          String  @id @default(cuid())
    zone_id     String
    name        String
    is_open     Boolean
    image       String
    description String
    Zone        Zone    @relation(fields: [zone_id], references: [id])
}

model ExhibitionVisit {
    id            String   @id @default(cuid())
    exhibition_id String
    date          DateTime @default(now())
    rating        Int?
}

model Museum_Entrance {
    id   String   @id @default(cuid())
    date DateTime @default(now())
}

model SpecialEvent {
    id          String   @id @default(cuid())
    name        String
    start_date        DateTime
    end_date String
    description String
    image       String
    insignias  Insignia[]
}